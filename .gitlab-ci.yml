# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: alpine
    
stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

  # - chmod 644 ~/.ssh/known_hosts


  # - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

build-job:
  image: alpine:3.6
  before_script:
  - apk update && apk add openssh-client bash
       # This job runs in the build stage, which runs first.
  stage: build
  script:
    # run ssh-agent
    - eval $(ssh-agent -s)

    # add private ssh key stored in SSH_PRIVATE_KEY variable to the agent store
    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'

    # $SSH_KNOWN_HOSTS was output from 'ssh-keyscan -p 2222 pub400.com'
    - mkdir -p ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    # ssh commands here   
    - echo "Compiling the code with SSH and Bob..."
    - >
      OUTPUT=$(ssh -p 2222 jweirich@pub400.com 
      "cd ~/projects/JDUBTX/ && 
      PATH=/QOpenSys/pkgs/bin:$PATH && 
      git pull origin main &&
      makei b &&
      exit"
    
    - |
      # Check Output 
      case "$OUTPUT" in 
      *'make: Nothing to be done'*)
        echo "Nothing Compiled"
        ;;
      *'Build Completed!'*)
        echo "Compile Successful"
        ;;
      *)
        echo "Build Failed"
        ;;
      esac    
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
