# ######################################################################################################
# This branch runs on gitlab.com shared runners
# build-job and lint-test-job is fully implemented.
# deploy-integration is partially implemented but has enough to get you started.
# unit-test-job is just a placeholder, for now.
# 
# ######################################################################################################
# Variables you must set in Gitlab CiCd variables
#   IBMI_USERID - The IBM i service account / user ID.  User have ability to SSH to your partition
#   IBMI_SSH_PORT - The IBM i's SSH Port.  Usually '22', but PUB400.com has it as '2222'.
#   APP_LIBRARY - The library on the IBM i partition where the application objects are
#   DEPLOY_LIBRARY - Another libary where new objects will be built and packaged
#   TEMP_DIR - A temporary IFS library - SAVF package is uploaded here before it is copied to the QSYS
#              file system.
#   SSH_KNOWN_HOSTS - Run ssh-keyscan on your local machine to get the public key values from 
#                     the IBM i and store it as the SSH_KNOWN_HOSTS variable in Gitlab CICD settings.
#   SSH_PRIVATE_KEY - Run SSH-KEYGEN on the IBM i to generate a private / public key pair.
#                     The public key must be stored on the IBM i as an AUTHORIZED_KEY
#                     The private key must be stored as the SSH_PRIVATE_KEY variable in 
#                     Gitlab CICD settings
#######################################################################################################

#This tells gitlab.com what version of linux container to run on.  Alpine is a lightweight / faster
# image than ubuntu, but requires you to take extra steps to install some things like open-ssh and bash 
image: alpine:3.6

#Global variables available to all jobs
variables:
  SAVFNAME: "GL${CI_COMMIT_SHORT_SHA}"

stages:  # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

#Global script that runs before each job
before_script:
  # Install openssh and bash in the alpine linux container
  - apk update && apk add openssh-client bash
  # run ssh-agent
  - eval $(ssh-agent -s)

  # add private ssh key stored in SSH_PRIVATE_KEY variable to the agent store
  - bash -c 'ssh-add <(echo "${SSH_PRIVATE_KEY}")'

  # $SSH_KNOWN_HOSTS was output from 'ssh-keyscan -p ${IBMI_SSH_PORT} pub400.com'
  - mkdir -p ~/.ssh
  - echo "${SSH_KNOWN_HOSTS}" > ~/.ssh/known_hosts

build-job:
  tags:
    - alpine
  # This job runs in the build stage, which runs first.
  stage: build
  artifacts:
    name: ${SAVFNAME}
    paths:
      - artifacts/  
  script:
    # ssh commands here   
    - echo "Compiling the code with SSH and Bob..."
    - >      
      OUTPUT=$(ssh -p ${IBMI_SSH_PORT} ${IBMI_USERID}@pub400.com 
      "cd ~/projects/JDUBTX/ && 
      PATH=/QOpenSys/pkgs/bin:$PATH &&
      git pull origin main &&
      cl \"CLRLIB LIB(${IBMI_USERID}2)\" &&
      makei b &&
      cl \"CRTSAVF FILE(${APP_LIBRARY}/${SAVFNAME}) TEXT('${CI_PROJECT_NAME}')\" &&
      cl \"SAVLIB LIB(${IBMI_USERID}2) DEV(*SAVF) SAVF(${IBMI_USERID}1/${SAVFNAME}) SAVACT(*NO)\" &&
      exit")
    
    - |
      # Check Output
      echo "$OUTPUT" 
      case "$OUTPUT" in 
      *'make: Nothing to be done'*)
        echo "Nothing Compiled"
        ;;
      *'Build Completed!'*)
        echo "Compile Successful, downloading save file"
        mkdir artifacts
        scp -P ${IBMI_SSH_PORT} ${IBMI_USERID}@pub400.com:/QSYS.LIB/${APP_LIBRARY}.LIB/${SAVFNAME}.FILE artifacts/${SAVFNAME}.savf
        ;;
      *)
        echo "Compile Failed"
        ;;
      esac    
    - echo "Build job complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  image: node:18
  dependencies: [] #Don't need the save file artifact from the build stage
  before_script:
    - npm i @halcyontech/rpglint -g
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:  
    - rpglint
    - echo "No lint issues found."

deploy-integration:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: Integration
  script:
    - echo "Deploying application..."
    - echo "clearing desitination library"
    - ssh -p ${IBMI_SSH_PORT} ${IBMI_USERID}@pub400.com "cl \"clrlib ${DEPLOY_LIBRARY}\" && exit"
    - sleep 5
    - echo "Uploading Save File"
    - scp -P ${IBMI_SSH_PORT} artifacts/${SAVFNAME}.savf ${IBMI_USERID}@pub400.com:${TEMP_DIR}/${SAVFNAME}.FILE
    # Copy to QSYS file system and extract contents
    # The following logic uses a proprietary "RESTLIB" command on PUB400 that restores objects to a temporary
    # file.  Basically RESTLIB works like RSTLIB except the contents are restored to a termporary library, the
    # name of which is sent to the user in a message.  We use DSPMSG and awk command to retrieve the 
    # name of the temporary library from the message.
    # If you are using this logic on your own IBM i (not PUB400.com), you'll want to use RSTLIB instead.
    - >
      ssh -p ${IBMI_SSH_PORT} ${IBMI_USERID}@pub400.com "cp ${TEMP_DIR}/${SAVFNAME}.file /QSYS.LIB/${DEPLOY_LIBRARY}.LIB/GL51643AB2.FILE && 
      cl \"RESTLIB LIBNAM(JWEIRICH2) SAVFNAM(SAVFNAM) SAVFLIB(JWEIRICH1)" &&
      sleep 10 &&
      templib=$(cl dspmsg jweirich | grep "has been restored into temporary library" | awk '{print $12}') &&
      exit"
    - echo "Application successfully deployed."
